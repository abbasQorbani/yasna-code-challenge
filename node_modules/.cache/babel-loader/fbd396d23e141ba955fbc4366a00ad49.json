{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/home/abbasQorbani/Documents/yasna-code-challenge/src/make-counter/make-counter.tsx\";\nimport React from 'react';\nimport './make-counter.scss';\nimport Counter from '../counter/counter'; // steps data model\n\nclass MakeCounter extends React.Component {\n  constructor(props) {\n    super(props);\n    this.makeCounterModel = void 0;\n    this.state = void 0;\n    this.state = {\n      steps: [],\n      activeMessage: '',\n      inputValue: '',\n      addIsDisabled: true\n    };\n    this.makeCounterModel = {\n      steps: [],\n      message: 'This only accepts numbers like 1, 2, -5, 3.8, 310',\n      currentStep: 1,\n      stepValue: 0,\n      validateFloat: ''\n    };\n  }\n\n  // on input change this method will fire\n  // have a regex for validate input to get just numbers with + and - signs and . for floating numbers\n  // ater that detect if input have floating number and this floating number length is bigger than one\n  // make input clear and add button disable and the hint text will moving\n  // but if regex is pass\n  // make add button enable and input value is set\n  // in another ways add button is disable and hint message is moving and input is clear\n  checkUserInput(event) {\n    const validate = /^[0-9 ()+-]+\\.?[0-9]*$/;\n\n    if (event.split('.')[1]) {\n      this.makeCounterModel.validateFloat = event.split('.')[1];\n\n      if (this.makeCounterModel.validateFloat.length >= 2) {\n        this.setState({\n          inputValue: '',\n          activeMessage: 'make-counter-parent__message--active',\n          addIsDisabled: true\n        });\n        return;\n      }\n    }\n\n    if (validate.exec(event)) {\n      this.makeCounterModel.stepValue = Number(event);\n      this.setState({\n        inputValue: event,\n        activeMessage: 'false',\n        addIsDisabled: false\n      });\n      return;\n    } else {\n      this.setState({\n        inputValue: '',\n        activeMessage: 'make-counter-parent__message--active',\n        addIsDisabled: true\n      });\n      return;\n    }\n  }\n\n  // this method will fire by clicking on add button\n  // make add button disable input value empty and hint message fix\n  // if you generate more than eight counter i will say to you is enough\n  // every time current step will increase\n  // step and value will pushed in steps array \n  // steps array will change the state\n  makeCounter(currentStep, stepValue) {\n    this.setState({\n      inputValue: '',\n      activeMessage: '',\n      addIsDisabled: true\n    });\n\n    if (this.makeCounterModel.currentStep > 8) {\n      alert('this is enough');\n      return;\n    }\n\n    ++this.makeCounterModel.currentStep;\n    this.makeCounterModel.steps.push({\n      step: currentStep,\n      stepValue: stepValue\n    });\n    this.setState({\n      steps: this.makeCounterModel.steps\n    });\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(\"section\", {\n        className: \"make-counter-parent\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"make-counter-parent__counter-maker-holder\",\n          children: [/*#__PURE__*/_jsxDEV(\"input\", {\n            className: \"make-counter-parent__steps-input\",\n            type: \"text\",\n            placeholder: \"enter steps value ...\",\n            value: this.state.inputValue,\n            onChange: e => this.checkUserInput(e.target.value)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 88,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            className: \"make-counter-parent__maker-button\",\n            disabled: this.state.addIsDisabled,\n            onClick: e => this.makeCounter(this.makeCounterModel.currentStep, this.makeCounterModel.stepValue),\n            children: \"Add counter\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 92,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 87,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: `make-counter-parent__message ${this.state.activeMessage}`,\n          children: this.makeCounterModel.message\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 97,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 86,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"section\", {\n        className: \"counter-parent\",\n        children: this.state.steps.map(step => /*#__PURE__*/_jsxDEV(Counter, {\n          step: step.step,\n          stepValue: step.stepValue,\n          defaultStep: 0,\n          makeRunDisable: false\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 104,\n          columnNumber: 56\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 101,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true);\n  }\n\n}\n\nexport default MakeCounter;","map":{"version":3,"sources":["/home/abbasQorbani/Documents/yasna-code-challenge/src/make-counter/make-counter.tsx"],"names":["React","Counter","MakeCounter","Component","constructor","props","makeCounterModel","state","steps","activeMessage","inputValue","addIsDisabled","message","currentStep","stepValue","validateFloat","checkUserInput","event","validate","split","length","setState","exec","Number","makeCounter","alert","push","step","render","e","target","value","map"],"mappings":"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","sourcesContent":["import React from 'react';\nimport './make-counter.scss';\nimport Counter from '../counter/counter';\n// steps data model\ninterface Steps {\n    step: number;\n    stepValue: number;\n}\n// make counter component data model\ninterface MakeCounterModel {\n    steps: Steps[];\n    message: string;\n    currentStep: number;\n    stepValue: number;\n    validateFloat: string;\n}\n  \nclass MakeCounter extends React.Component{\n    makeCounterModel: MakeCounterModel;\n    state: {steps: Steps[], activeMessage: string, inputValue: string, addIsDisabled: boolean};\n    constructor(\n            props: Steps\n        ) {\n        super(props);\n        this.state = {\n            steps: [],\n            activeMessage: '',\n            inputValue: '',\n            addIsDisabled: true\n        };\n        this.makeCounterModel = {\n            steps: [],\n            message: 'This only accepts numbers like 1, 2, -5, 3.8, 310',\n            currentStep: 1,\n            stepValue: 0,\n            validateFloat: ''\n        }\n    };\n    // on input change this method will fire\n    // have a regex for validate input to get just numbers with + and - signs and . for floating numbers\n    // ater that detect if input have floating number and this floating number length is bigger than one\n    // make input clear and add button disable and the hint text will moving\n    // but if regex is pass\n    // make add button enable and input value is set\n    // in another ways add button is disable and hint message is moving and input is clear\n    checkUserInput(event: string): void {\n        const validate: RegExp = /^[0-9 ()+-]+\\.?[0-9]*$/;\n        if (event.split('.')[1]) {\n            this.makeCounterModel.validateFloat = event.split('.')[1];\n            if (this.makeCounterModel.validateFloat.length >= 2) {\n                this.setState({inputValue: '',activeMessage: 'make-counter-parent__message--active', addIsDisabled: true});\n                return;\n            }\n        }\n        if (validate.exec(event)) {\n            this.makeCounterModel.stepValue = Number(event);\n            this.setState({inputValue: event,activeMessage: 'false', addIsDisabled: false});\n            return;\n        } else {\n            this.setState({inputValue: '',activeMessage: 'make-counter-parent__message--active', addIsDisabled: true});\n            return;\n        }\n    };\n    // this method will fire by clicking on add button\n    // make add button disable input value empty and hint message fix\n    // if you generate more than eight counter i will say to you is enough\n    // every time current step will increase\n    // step and value will pushed in steps array \n    // steps array will change the state\n    makeCounter(currentStep: number, stepValue: number): void {\n        this.setState({inputValue: '',activeMessage: '', addIsDisabled: true});\n        if (this.makeCounterModel.currentStep > 8) {\n            alert('this is enough');\n            return;\n        }\n        ++this.makeCounterModel.currentStep;\n        this.makeCounterModel.steps.push({step: currentStep, stepValue: stepValue});\n        this.setState({\n            steps: this.makeCounterModel.steps\n        });\n    }\n\n    render() {\n        return (\n            <>\n                <section className=\"make-counter-parent\">\n                    <div className=\"make-counter-parent__counter-maker-holder\">\n                        <input className=\"make-counter-parent__steps-input\" type=\"text\"\n                            placeholder=\"enter steps value ...\"\n                            value={this.state.inputValue}\n                            onChange={(e) => this.checkUserInput(e.target.value)} />\n                        <button className=\"make-counter-parent__maker-button\"\n                                disabled={this.state.addIsDisabled}\n                                onClick={(e) => this.makeCounter(this.makeCounterModel.currentStep,\n                                this.makeCounterModel.stepValue)}>Add counter</button>\n                    </div>\n                    <div className={`make-counter-parent__message ${this.state.activeMessage}`}>\n                        {this.makeCounterModel.message}\n                    </div>\n                </section>\n                <section className=\"counter-parent\">\n                    {/* dynamicaly generate instance of counter component */}\n                    {\n                        this.state.steps.map((step) => <Counter step={step.step} stepValue={step.stepValue} defaultStep={0} makeRunDisable={false} />)\n                    }\n                </section>\n            </>\n        )\n    }\n}\n\n\n\n\nexport default MakeCounter;"]},"metadata":{},"sourceType":"module"}