{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/home/abbasQorbani/Documents/yasna-code-challenge/src/make-counter/make-counter.tsx\";\nimport React from 'react';\nimport './make-counter.scss';\nimport Counter from '../counter/counter';\n\nclass MakeCounter extends React.Component {\n  constructor(props) {\n    super(props);\n    this.makeCounterModel = void 0;\n    this.state = void 0;\n    this.state = {\n      steps: [],\n      activeMessage: '',\n      inputValue: ''\n    };\n    this.makeCounterModel = {\n      steps: [],\n      message: 'This only accepts numbers like 1, 2, -5, 3.8, 310',\n      currentStep: 1,\n      stepValue: 0\n    };\n  }\n\n  checkUserInput(event) {\n    const validate = /^[0-9 ()+-]+\\.?[0-9]$/;\n\n    if (validate.exec(event)) {\n      this.setState({\n        activeMessage: ''\n      });\n      this.makeCounterModel.stepValue = Number(event);\n      this.setState({\n        inputValue: event\n      });\n      return;\n    } else {\n      this.setState({\n        inputValue: ''\n      });\n      this.setState({\n        activeMessage: 'make-counter-parent__message--active'\n      });\n      return;\n    }\n  }\n\n  makeCounter(currentStep, stepValue) {\n    this.setState({\n      inputValue: ''\n    });\n\n    if (this.makeCounterModel.currentStep > 8) {\n      alert('this is enough');\n      return;\n    }\n\n    ++this.makeCounterModel.currentStep;\n    this.makeCounterModel.steps.push({\n      step: currentStep,\n      stepValue: stepValue\n    });\n    this.setState({\n      steps: this.makeCounterModel.steps\n    });\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(\"section\", {\n        className: \"make-counter-parent\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"make-counter-parent__counter-maker-holder\",\n          children: [/*#__PURE__*/_jsxDEV(\"input\", {\n            className: \"make-counter-parent__steps-input\",\n            type: \"text\",\n            placeholder: \"enter steps value ...\",\n            value: this.state.inputValue,\n            onChange: e => this.checkUserInput(e.target.value)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 68,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            className: \"make-counter-parent__maker-button\",\n            onClick: e => this.makeCounter(this.makeCounterModel.currentStep, this.makeCounterModel.stepValue),\n            children: \"Add counter\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 72,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 67,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: `make-counter-parent__message ${this.state.activeMessage}`,\n          children: this.makeCounterModel.message\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 74,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 66,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"section\", {\n        className: \"counter-parent\",\n        children: this.state.steps.map(step => /*#__PURE__*/_jsxDEV(Counter, {\n          step: step.step,\n          stepValue: step.stepValue,\n          defaultStep: 0\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 80,\n          columnNumber: 56\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 78,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true);\n  }\n\n}\n\nexport default MakeCounter;","map":{"version":3,"sources":["/home/abbasQorbani/Documents/yasna-code-challenge/src/make-counter/make-counter.tsx"],"names":["React","Counter","MakeCounter","Component","constructor","props","makeCounterModel","state","steps","activeMessage","inputValue","message","currentStep","stepValue","checkUserInput","event","validate","exec","setState","Number","makeCounter","alert","push","step","render","e","target","value","map"],"mappings":"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","sourcesContent":["import React from 'react';\nimport './make-counter.scss';\nimport Counter from '../counter/counter';\n\ninterface Steps {\n    step: number;\n    stepValue: number;\n}\n\ninterface MakeCounterModel {\n    steps: Steps[];\n    message: string;\n    currentStep: number;\n    stepValue: number;\n}\n  \nclass MakeCounter extends React.Component{\n    makeCounterModel: MakeCounterModel;\n    state: {steps: Steps[], activeMessage: string, inputValue: string};\n    constructor(\n            props: Steps\n        ) {\n        super(props);\n        this.state = {\n            steps: [],\n            activeMessage: '',\n            inputValue: ''\n        };\n        this.makeCounterModel = {\n            steps: [],\n            message: 'This only accepts numbers like 1, 2, -5, 3.8, 310',\n            currentStep: 1,\n            stepValue: 0\n        }\n    };\n    checkUserInput(event: string): void {\n        const validate: RegExp = /^[0-9 ()+-]+\\.?[0-9]$/;\n        if (validate.exec(event)) {\n            this.setState({activeMessage: ''});\n            this.makeCounterModel.stepValue = Number(event);\n            this.setState({inputValue: event});\n            return;\n        } else {\n            this.setState({inputValue: ''});\n            this.setState({activeMessage: 'make-counter-parent__message--active'});\n            return;\n        }\n    };\n\n    makeCounter(currentStep: number, stepValue: number): void {\n        this.setState({inputValue: ''});\n        if (this.makeCounterModel.currentStep > 8) {\n            alert('this is enough');\n            return;\n        }\n        ++this.makeCounterModel.currentStep;\n        this.makeCounterModel.steps.push({step: currentStep, stepValue: stepValue});\n        this.setState({\n            steps: this.makeCounterModel.steps\n        });\n    }\n\n    render() {\n        return (\n            <>\n                <section className=\"make-counter-parent\">\n                    <div className=\"make-counter-parent__counter-maker-holder\">\n                        <input className=\"make-counter-parent__steps-input\" type=\"text\"\n                            placeholder=\"enter steps value ...\"\n                            value={this.state.inputValue}\n                            onChange={(e) => this.checkUserInput(e.target.value)} />\n                        <button className=\"make-counter-parent__maker-button\" onClick={(e) => this.makeCounter(this.makeCounterModel.currentStep, this.makeCounterModel.stepValue)}>Add counter</button>\n                    </div>\n                    <div className={`make-counter-parent__message ${this.state.activeMessage}`}>\n                        {this.makeCounterModel.message}\n                    </div>\n                </section>\n                <section className=\"counter-parent\">\n                    {\n                        this.state.steps.map((step) => <Counter step={step.step} stepValue={step.stepValue} defaultStep={0} />)\n                    }\n                </section>\n            </>\n        )\n    }\n}\n\n\n\n\nexport default MakeCounter;"]},"metadata":{},"sourceType":"module"}